name: pull_request
run-name: Pull Request

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
    
    
# Prevent running concurrently
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true
     
env:
  GH_TOKEN: ${{ github.token }}

jobs:
  get_changed_files:
    name: Get changed files
    runs-on: ubuntu-latest
    outputs:
      changed_files: ${{ steps.changed_files.outputs.changed_files }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: GH CLI Version
        run: gh --version
      - name: Get changed files
        id: changed_files
        run: |
          changed_files=`gh pr diff ${{ github.event.number }} --name-only | xargs`
          echo "changed_files=$changed_files" >> $GITHUB_OUTPUT
      - name: Echo changed files
        run: |
          echo ${{ steps.changed_files.outputs.changed_files }} | tr " " "\n"
          
  format:
    name: Check format of python
    needs: get_changed_files
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ github.token }}
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      
      - name: Format code
        # Lints and formats are called only against the changed files, because other
        # files must have come from master
        run: bash deploy/format.sh ${{ needs.get_changed_files.outputs.changed_files }}
        

  lint:
    name: Lint python
    needs: get_changed_files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(gh pr diff ${{ github.event.number }} --name-only | xargs)
      - name: Run linter
        # Lints and formats are called only against the changed files, because other
        # files must have come from master
        run: bash deploy/lint.sh ${{ needs.get_changed_files.outputs.changed_files }}

  # Run tests
  test:
    name: Run Testing matrix
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.8, 3.9, "3.10", "3.11"]
    runs-on: ${{ matrix.os }}
    steps:
      #install python
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref || github.ref }}
      - name: Run tests
        run: |
          bash deploy/run_tests.sh ${{ github.workspace }} ${{ matrix.python-version }} ${{ matrix.os }}
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2

                    