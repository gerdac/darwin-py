name: created_tag
run-name: Created Tag

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'test-*'

concurrency:
  group: created_tag
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          ref: ${{ github.head_ref || github.ref }}

  check_master_is_passing:
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Wait for branch to not be pending, and ensure it's passing
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            /*
              NB: This only test the main branch, not the branch that was tagged - tests only run on that branch if it is a PR
            */
            // get main branch name
            const main_branch = await github.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            }).then(res => res.data.default_branch);

            // wait until main branch is not pending
            let state;

            // set a timeout to avoid waiting forever
            const TEN_MINUTES = 10 * 60 * 1000;
            const avoidInfiniteWait = setTimeout(() => {
              core.setFailed('Timed out waiting for main branch to not be pending');
            }, TEN_MINUTES);

            while (true) {
              const { data: { state } } = await github.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: main_branch
              });
              if (state !== 'pending') {
                break;
              }
              console.log('Main branch is pending, waiting 10 seconds');
              await new Promise(resolve => setTimeout(resolve, 10000));
            }
            clearTimeout(avoidInfiniteWait);

            console.log('Branch state: ' + state);
            console.log('Branch ref: ' + ref');

            if (state !== 'success') {
              core.setFailed('Tagged branch is not passing, cannot create a release');
            }

  deploy:
    needs: [checkout, check_master_is_passing]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { data: { id: release_id } } = await github.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: context.ref,
              name: context.ref,
              draft: true,
              prerelease: context.ref.startsWith('test-')
            });
            core.setOutput('release_id', release_id);
