name: created_tag
run-name: Created Tag

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'
      - 'test-*'

concurrency:
  group: created_tag
  cancel-in-progress: true

env:
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  checkout:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
        with:
          ref: ${{ github.head_ref || github.ref }}

  debug:
    needs: checkout
    uses: ./.github/workflows/JOB_debug_contexts.yml

  check_master_is_passing:
    name: Check master is passing
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - name: Wait for branch to not be pending, and ensure it's passing
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // get info for tag
            const branch = '${{ github.event.base_ref }}';
            console.log('Branch: ${{ github.event.base_ref }}');

            // get latest commit on branch
            const { data } = await github.repos.getBranch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branch
            });

            const mostRecentCommit = data.commit.sha;
            console.log('Most recent commit: ' + mostRecentCommit);

            // Get last workflow run triggered by this branch
            const { data: { workflow_runs: workflow_runs } } = await github.actions.listWorkflowRunsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              branch: branch,
              status: 'completed',
            })
            console.log('Workflow runs: ' + workflow_runs);

            //// wait until branch is not pending
            //let state;

            //// set a timeout to avoid waiting forever
            //const TEN_MINUTES = 10 * 60 * 1000;
            //const avoidInfiniteWait = setTimeout(() => {
            //  core.setFailed('Timed out waiting for branch to not be pending');
            //}, TEN_MINUTES);

            //while (true) {
            //  const { data: { state } } = await github.repos.getCombinedStatusForRef({
            //    owner: context.repo.owner,
            //    repo: context.repo.repo,
            //    ref: branch
            //  });
            //  if (state !== 'pending') {
            //    break;
            //  }
            //  console.log('Branch is pending, waiting 10 seconds');
            //  await new Promise(resolve => setTimeout(resolve, 10000));
            //}
            //clearTimeout(avoidInfiniteWait);

            //console.log('Branch state: ' + state);
            //console.log('Branch ref: ' + ref);

            //if (state !== 'success') {
            //  core.setFailed('Tagged branch is not passing, cannot create a release');
            //}

  # deploy:
  #   needs: [checkout, check_master_is_passing]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Create release
  #       uses: actions/github-script@v3
  #       with:
  #         github-token: ${{ secrets.GITHUB_TOKEN }}
  #         script: |
  #           const { data: { id: release_id } } = await github.repos.createRelease({
  #             owner: context.repo.owner,
  #             repo: context.repo.repo,
  #             tag_name: context.ref,
  #             name: context.ref,
  #             draft: true,
  #             prerelease: context.ref.startsWith('test-')
  #           });
  #           core.setOutput('release_id', release_id);
